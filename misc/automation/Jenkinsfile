
pipeline {
  agent any
  environment  {
    APP_NAME = credentials('APP_NAME')
    APP_ENV = credentials('APP_ENV')
    APP_KEY = credentials('APP_KEY')
    APP_DEBUG = credentials('APP_DEBUG')
    APP_TIMEZONE = credentials('APP_TIMEZONE')

    APP_LOCALE = credentials('APP_LOCALE')
    APP_FALLBACK_LOCALE = credentials('APP_FALLBACK_LOCALE')
    APP_FAKER_LOCALE = credentials('APP_FAKER_LOCALE')

    BCRYPT_ROUNDS = credentials('BCRYPT_ROUNDS')

    LOG_CHANNEL = credentials('LOG_CHANNEL')
    LOG_STACK = credentials('LOG_STACK')
    LOG_DEPRECATIONS_CHANNEL = credentials('LOG_DEPRECATIONS_CHANNEL')
    LOG_LEVEL = credentials('LOG_LEVEL')

    DB_CONNECTION = credentials('DB_CONNECTION')
    DB_HOST = credentials('DB_HOST')
    DB_PORT = credentials('DB_PORT')
    DB_DATABASE = credentials('DB_DATABASE')
    DB_USERNAME = credentials('DB_USERNAME')
    DB_PASSWORD = credentials('DB_PASSWORD')

    SESSION_DRIVER = credentials('SESSION_DRIVER')
    SESSION_LIFETIME = credentials('SESSION_LIFETIME')
    SESSION_ENCRYPT = credentials('SESSION_ENCRYPT')
    SESSION_PATH = credentials('SESSION_PATH')
    SESSION_DOMAIN = credentials('SESSION_DOMAIN')

    BROADCAST_CONNECTION = credentials('BROADCAST_CONNECTION')
    FILESYSTEM_DISK = credentials('FILESYSTEM_DISK')
    QUEUE_CONNECTION = credentials('QUEUE_CONNECTION')
    
    CACHE_STORE = credentials('CACHE_STORE')
    CACHE_PREFIX = credentials('CACHE_PREFIX')

    MEMCACHED_HOST = credentials('MEMCACHED_HOST')

    REDIS_CLIENT = credentials('REDIS_CLIENT')
    REDIS_HOST = credentials('REDIS_HOST')
    REDIS_PASSWORD = credentials('REDIS_PASSWORD')
    REDIS_PORT = credentials('REDIS_PORT')

    MAIL_MAILER = credentials('MAIL_MAILER')
    MAIL_HOST = credentials('MAIL_HOST')
    MAIL_PORT = credentials('MAIL_PORT')
    MAIL_USERNAME = credentials('MAIL_USERNAME')
    MAIL_PASSWORD = credentials('MAIL_PASSWORD')
    MAIL_ENCRYPTION = credentials('MAIL_ENCRYPTION')
    MAIL_FROM_ADDRESS = credentials('MAIL_FROM_ADDRESS')
    MAIL_FROM_NAME = credentials('MAIL_FROM_NAME')
    
    AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
    AWS_DEFAULT_REGION = credentials('AWS_DEFAULT_REGION')
    AWS_BUCKET = credentials('AWS_BUCKET')
    AWS_USE_PATH_STYLE_ENDPOINT = credentials('AWS_USE_PATH_STYLE_ENDPOINT')
    
    VITE_APP_NAME = credentials('VITE_APP_NAME')

    JWT_SECRET = credentials('JWT_SECRET')
    JWT_ALGO = credentials('JWT_ALGO')
    JWT_SHOW_BLACKLIST_EXCEPTION = credentials('JWT_SHOW_BLACKLIST_EXCEPTION')
  }
  stages {
    stage("BUILD DOCKER IMAGE") {
            steps {
                script {
                    echo "========BUILD DOCKER IMAGE ========"
                    sh "docker build -f ./misc/docker/Dockerfile -t $REGISTRY_IMAGE_STARTER_NAME/${IMAGE_NAME}:${imageTags} ."
                }
            }
        }
        stage("PUSH IMAGE TO REGISTRY"){
            steps{
                script {
                    echo "========PUSH DOCKER IMAGE TO REGISTRY ========"
                    sh "echo $REGISTRY_CREDENTIALS_PSW | docker login -u $REGISTRY_CREDENTIALS_USR --password-stdin $REGISTRY_ADDRESS"
                    sh "docker push $REGISTRY_IMAGE_STARTER_NAME/${IMAGE_NAME}:${imageTags}"
                }

            }
        }
        stage("CLEAN UP LOCAL IMAGE") {
            steps {
                script {
                    echo "========CLEAN UP LOCAL IMAGE========"
                    sh "docker rmi $REGISTRY_IMAGE_STARTER_NAME/${IMAGE_NAME}:${imageTags}"
                }

            }
        }
        stage("DEPLOY TO SERVER") {
            steps {
                script {
                        echo "========DEPLOY TO PRODUCTION SERVER========"
                        sshagent(['']) {
                            sh "ssh ${REMOTE_USER}@${REMOTE_SERVER} 'echo $REGISTRY_CREDENTIALS_PSW | docker login -u $REGISTRY_CREDENTIALS_USR --password-stdin $REGISTRY_ADDRESS'"
                            sh "ssh ${REMOTE_USER}@${REMOTE_SERVER} 'docker container rm -f venturo-siakad-be || true'"
                            sh "ssh ${REMOTE_USER}@${REMOTE_SERVER} 'docker pull $REGISTRY_IMAGE_STARTER_NAME/${IMAGE_NAME}:${imageTags}'"
                            sh "ssh ${REMOTE_USER}@${REMOTE_SERVER} 'docker run -d --name venturo-siakad-be -p 8002:8002 \
                            --restart=always \
                            -e AWS_URL=${AWS_URL} \
                            $REGISTRY_IMAGE_STARTER_NAME/${IMAGE_NAME}:${imageTags}'"
                            sh "ssh ${REMOTE_USER}@${REMOTE_SERVER} 'docker logout $REGISTRY_ADDRESS'"
                        }
                    }
                }
            }
        }
         post{
      always{
          echo "========always========"
          sh 'docker logout $REGISTRY_ADDRESS'
      }
  }
    }
   
